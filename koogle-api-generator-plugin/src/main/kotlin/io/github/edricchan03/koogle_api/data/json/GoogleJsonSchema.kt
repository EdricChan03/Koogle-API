package io.github.edricchan03.koogle_api.data.json

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * Data class representing the JSON schema as returned by the Google Discovery
 * API.
 */
@Serializable
data class GoogleJsonSchema(
    /** Unique identifier for this schema. */
    val id: String? = null,
    /** A description of this object. */
    val description: String? = null,
    /** Whether this parameter goes in the query or the path for REST requests. */
    val location: String? = null,
    /** A reference to another schema. The value of this property is the "id" of another schema. */
    @SerialName("\$ref")
    val metaRef: String? = null,
    /**
     * The value type for this schema.
     *
     * A list of values can be found [here](http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1)
     */
    val type: JsonSchemaType? = null,
    /**
     * An additional regular expression or key that helps constrain the value.
     *
     * For more details see [here](http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23)
     */
    val format: String? = null,
    /** The default value of this property (if one exists). */
    val default: String? = null,
    /**
     * The regular expression this parameter must conform to.
     * Uses [Java 6 regex format](http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html)
     */
    val pattern: String? = null,
    /** The maximum value of this parameter. */
    val maximum: String? = null,
    /** The minimum value of this parameter. */
    val minimum: String? = null,
    /**
     * The value is read-only, generated by the service.
     * The value cannot be modified by the client.
     *
     * If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.
     */
    val readOnly: Boolean? = null,
    /** Whether the parameter is required. */
    val required: Boolean? = null,
    /** Whether this parameter may appear multiple times. */
    val repeated: Boolean? = null,
    /** Values this parameter may take (if it is an enum). */
    val enum: List<String>? = null,
    /** The descriptions for the enums. Each position maps to the corresponding value in the "enum" array. */
    val enumDescriptions: List<String>? = null,
    /** If this is a schema for an object, list the schema for each property of this object. */
    val properties: Map<String, GoogleJsonSchema>? = null,
    /**
     * If this is a schema for an object, this property is the schema for any additional
     * properties with dynamic keys on this object.
     */
    val additionalProperties: GoogleJsonSchema? = null,
    /** If this is a schema for an array, this property is the schema for each element in the array. */
    val items: GoogleJsonSchema? = null,
    /** Additional information about this property. */
    val annotations: Annotations? = null,
    /**
     * In a variant data type, the value of one property is used to determine how to
     * interpret the entire entity.
     *
     * Its value must exist in a map of discriminant values to schema names.
     */
    val variant: Variant? = null
) {
    /** Gets the list of enums and their descriptions as a list of [Pair]s. */
    val enumsAsPairs = enum?.mapIndexed { i, item -> item to enumDescriptions?.getOrNull(i) }

    /**
     * Gets the required annotations.
     * @see Annotations.required
     */
    val requiredAnnotations = annotations?.required

    @Serializable
    data class Annotations(
        /** A list of methods for which this property is required on requests. */
        val required: List<String>? = null
    )

    @Serializable
    data class Variant(
        /** The map of discriminant value to schema to use for parsing. */
        val map: List<Map>? = null,
        /** The name of the type discriminant property. */
        val discriminant: String? = null
    ) {
        @Serializable
        data class Map(
            @SerialName("type_value")
            val typeValue: String? = null,
            @SerialName("\$ref")
            val metaRef: String? = null
        )
    }
}
